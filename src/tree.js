const freemarker = require('freemarker-parser');
const fs = require('fs');
const path = require('path');

const dependencies = require('./helpers/dependencies');

const parser = new freemarker.Parser();

class Tree {
  /**
   * Parse FreeMarker template
   * @param {String} fileContents FreeMarker template content
   * @return {Object} parsed FreeMarker data
   */
  static parseTemplate(fileContents) {
    return parser.parse(fileContents);
  }

  /**
    * @param {String} templatePath template to generate tree
    * @param {Array} baseDirectories array of directories to search for files
    * @param {Array} plugins functions to generate additional info on templates
    */
  constructor(templatePath, baseDirectories, plugins = []) {
    this.templatePath = templatePath;
    this.baseDirectories = baseDirectories;
    this.plugins = plugins;
  }

  /**
    * @param {Object} data parsed FreeMarker data
    * @returns {Object} additional file info
    */
  generateAdditionalInfo(data) {
    let additionalInfo = {};
    this.plugins.forEach((plugin) => {
      additionalInfo = { ...additionalInfo, ...plugin(data) };
    });
    return additionalInfo;
  }

  /**
   * Read file contents for the provided file
   * @param {String} filename file to be read, must exist or error will be thrown.
   * @return {Object} file contents and additional info generated by plugins
   */
  readFileContents(filename) {
    let fileContents;
    this.baseDirectories.forEach((dir) => {
      if (fs.existsSync(path.join(dir, filename))) {
        fileContents = fs.readFileSync(path.join(dir, filename), 'utf8');
      }
    });

    if (!fileContents) {
      throw new Error(`Could not read ${filename}`);
    }

    return fileContents;
  }

  /**
   * Generate a tree of dependencies for the provided
   * FreeMarker template
   * @param {String} filename target file for dependency tree creation
   * @return {Object} file tree
   */
  generateTree(filename = this.templatePath) {
    const fileContents = this.readFileContents(filename);
    const tree = { filename };

    const freemarkerData = Tree.parseTemplate(fileContents);
    const files = dependencies(freemarkerData);

    tree.additionalInfo = this.generateAdditionalInfo(freemarkerData);
    tree.dependencies = files.map((dep) => this.generateTree(dep));
    return tree;
  }
}

module.exports = Tree;
