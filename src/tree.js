const freemarker = require('freemarker-parser');
const fs = require('fs');
const path = require('path');

class Tree {
  /**
    * @param {Object} token freemarker token
    * @return {Boolean} token is an include directive
    */
  static isInclude(token) {
    return (token.type === 'Directive' && token.text === 'include');
  }

  /**
    * @param {Object} token freemarker token
    * @return {Boolean} token is an import directive
    */
  static isImport(token) {
    return (token.type === 'Directive' && token.text === 'import');
  }

  /**
    * @param {Object} token freemarker token
    * @return {String|Boolean} a valid file path if it exists or false
    */
  static getPath(token) {
    const match = /\/.*\.[\w:]+/.exec(token.params);
    if (match && match[0] !== 'undefined') {
      return match[0];
    }
    return false;
  }

  /**
   * Generate a list of dependencies for the provided
   * FreeMarker template
   * @param {String} fileContents contents of previously created file
   * @return {Array} array of all files included or imported
   */
  static getDeps(fileContents) {
    const parser = new freemarker.Parser();
    const ast = parser.parse(fileContents);
    const files = ast.tokens
      .filter((token) => Tree.isInclude(token) || Tree.isImport(token))
      .map(Tree.getPath)
      .filter((x) => (x !== false));
    return files;
  }

  /**
    * @param {String} templatePath template to generate tree
    * @param {Array} baseDirectories array of directories to search for files
    * @param {Function} additionalInfoGenerator function to generate additional info on templates
    */
  constructor(templatePath, baseDirectories, additionalInfoGenerator) {
    this.templatePath = templatePath;
    this.baseDirectories = baseDirectories;
    this.additionalInfoGenerator = additionalInfoGenerator;
  }

  /**
   * Read file contents for the provided file
   * @param {String} filename file to be read, must exist or error will be thrown.
   * @return {Object} file contents and additional info generated by additionalInfoGenerator
   */
  readFileContents(filename) {
    let fileContents;
    this.baseDirectories.forEach((dir) => {
      if (fs.existsSync(path.join(dir, filename))) {
        fileContents = fs.readFileSync(path.join(dir, filename), 'utf8');
      }
    });

    if (!fileContents) {
      throw new Error(`Could not read ${filename}`);
    }

    let additionalInfo = {};
    if (this.additionalInfoGenerator) {
      additionalInfo = this.additionalInfoGenerator(fileContents);
    }

    return { fileContents, additionalInfo };
  }

  /**
   * Generate a tree of dependencies for the provided
   * FreeMarker template
   * @param {String} filename target file for dependency tree creation
   * @return {Object} file tree
   */
  generateTree(filename = this.templatePath) {
    const { fileContents, additionalInfo } = this.readFileContents(filename);
    const tree = { filename, additionalInfo };
    const files = Tree.getDeps(fileContents);
    tree.dependencies = files.map((dep) => this.generateTree(dep));
    return tree;
  }
}

module.exports = Tree;
